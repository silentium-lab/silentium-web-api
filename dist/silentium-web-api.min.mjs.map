{"version":3,"file":"silentium-web-api.min.mjs","sources":["../src/history-api/HistoryPoppedPage.ts","../src/history-api/HistoryNewPage.ts","../src/fetch/Fetched.ts","../src/dom/Element.ts","../src/dom/Attribute.ts","../src/dom/StyleInstalled.ts","../src/dom/controls/Input.ts","../src/console/Log.ts"],"sourcesContent":["import {\n  destroy,\n  give,\n  patronOnce,\n  sourceOf,\n  SourceType,\n  value,\n} from \"silentium\";\n\ntype WindowListener<T> = {\n  addEventListener: (name: string, handler: (e: T) => void) => void;\n  removeEventListener: (name: string, handler: (e: T) => void) => void;\n};\n\n/**\n * Get source of new page popped from historyAPI\n * https://developer.mozilla.org/en-US/docs/Web/API/History_API\n */\nexport const historyPoppedPage = (\n  listenSrc: SourceType<WindowListener<PopStateEvent>>,\n  destroyedSrc: SourceType<void>,\n) => {\n  const result = sourceOf<string>();\n\n  const handler = (e: PopStateEvent) => {\n    const { state } = e;\n    if (state?.url) {\n      give(String(state.url), result);\n    }\n  };\n\n  value(\n    listenSrc,\n    patronOnce((listen) => {\n      listen.addEventListener(\"popstate\", handler);\n    }),\n  );\n\n  value(\n    destroyedSrc,\n    patronOnce(() => {\n      destroy([result]);\n\n      value(listenSrc, (listen) => {\n        listen.removeEventListener(\"popstate\", handler);\n      });\n    }),\n  );\n\n  return result;\n};\n","import {\n  give,\n  guestCast,\n  GuestType,\n  sourceAll,\n  SourceType,\n  value,\n} from \"silentium\";\n\ntype PushStateAwareType = {\n  pushState(data: Record<string, unknown>, title: string, url: string): void;\n};\n\n/**\n * Apply content of new url to history API\n * https://developer.mozilla.org/en-US/docs/Web/API/History_API\n */\nexport const historyNewPate = (\n  pushSrc: SourceType<PushStateAwareType>,\n  urlSrc: SourceType<string>,\n) => {\n  return (guest: GuestType<string>) => {\n    value(\n      sourceAll([urlSrc, pushSrc]),\n      guestCast(guest, ([url, push]) => {\n        push.pushState(\n          {\n            url,\n            date: Date.now(),\n          },\n          \"\",\n          url,\n        );\n        give(url, guest);\n      }),\n    );\n  };\n};\n","import {\n  give,\n  GuestType,\n  patron,\n  sourceAll,\n  sourceOf,\n  SourceType,\n  value,\n} from \"silentium\";\n\ntype FetchType = { fetch: (input: RequestInfo) => Promise<Response> };\n\n/**\n * Wrapper around FetchAPI\n * https://kosukhin.github.io/patron-web-api/#/fetch/fetched\n * https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n */\nexport const fetched = <T>(\n  fetch: SourceType<FetchType>,\n  request: SourceType<Partial<RequestInfo>>,\n  errors: GuestType<Error>,\n) => {\n  const result = sourceOf<T>();\n\n  value(\n    sourceAll([request, fetch]),\n    patron(([req, fetch]) => {\n      fetch\n        .fetch(req as RequestInfo)\n        .then((response) => {\n          let readableResponse;\n          if (response.headers.get(\"Content-Type\") === \"application/json\") {\n            readableResponse = response.json();\n          } else {\n            readableResponse = response.text();\n          }\n\n          if (!response.ok) {\n            return Promise.reject(readableResponse);\n          }\n\n          return readableResponse;\n        })\n        .then((content) => {\n          give(content, result);\n        })\n        .catch((error) => {\n          give(error, errors);\n        });\n    }),\n  );\n\n  return result;\n};\n","import {\n  give,\n  guestCast,\n  GuestType,\n  PersonalType,\n  sourceAll,\n  SourceType,\n  value,\n} from \"silentium\";\n\ntype MutationAware = {\n  observe(\n    node: HTMLElement,\n    config: { childList: boolean; subtree: boolean },\n  ): void;\n  disconnect(): void;\n};\n\ntype MutationList = { type: string }[];\n\n/**\n * Helps to find element by selector\n * https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API\n */\nexport const element = <T extends HTMLElement>(\n  createObserver: PersonalType<MutationAware>,\n  documentSrc: SourceType<Document>,\n  selectorSrc: SourceType<string>,\n): SourceType<T> => {\n  return (guest: GuestType<T>) => {\n    value(\n      sourceAll([selectorSrc, documentSrc]),\n      guestCast(guest, ([selector, document]) => {\n        const element = document.querySelector(selector);\n        if (element) {\n          give(element as T, guest);\n        } else if (createObserver) {\n          const targetNode = document.body;\n          const config = { childList: true, subtree: true };\n\n          const observer = createObserver.get((mutationsList: MutationList) => {\n            for (const mutation of mutationsList) {\n              if (mutation.type === \"childList\") {\n                const element = document.querySelector(selector);\n                if (element) {\n                  give(element as T, guest);\n                  observer.disconnect();\n                  break;\n                }\n              }\n            }\n          });\n\n          observer.observe(targetNode, config);\n        } else {\n          throw new Error(`Element with selector=${selector} was not found!`);\n        }\n      }),\n    );\n  };\n};\n","import {\n  give,\n  patron,\n  sourceAll,\n  sourceOf,\n  SourceType,\n  subSourceMany,\n  value,\n} from \"silentium\";\n\n/**\n * Return content attribute of HTMLElement\n * https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API\n */\nexport const attribute = (\n  elementSrc: SourceType<HTMLElement>,\n  attrNameSrc: SourceType<string>,\n  defaultValueSrc: SourceType<string> = \"\",\n) => {\n  const result = sourceOf<string>();\n  subSourceMany(result, [elementSrc, attrNameSrc, defaultValueSrc]);\n\n  value(\n    sourceAll([elementSrc, attrNameSrc, defaultValueSrc]),\n    patron(([el, attrName, defaultValue]) => {\n      give(el.getAttribute(attrName) || defaultValue, result);\n    }),\n  );\n\n  return result;\n};\n","import {\n  give,\n  guestCast,\n  GuestType,\n  sourceAll,\n  SourceType,\n  value,\n} from \"silentium\";\n\n/**\n * Render styles to document\n * https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API\n */\nexport const styleInstalled = (\n  documentSrc: SourceType<Document>,\n  contentSrc: SourceType<string>,\n) => {\n  return (guest: GuestType<string>) => {\n    value(\n      sourceAll([documentSrc, contentSrc]),\n      guestCast(guest, ([document, content]) => {\n        const styleEl = document.createElement(\"style\");\n        styleEl.textContent = content;\n        document.head.appendChild(styleEl);\n        give(content, guest);\n      }),\n    );\n  };\n};\n","import {\n  patron,\n  sourceAll,\n  SourceChangeableType,\n  SourceType,\n  value,\n} from \"silentium\";\n\ntype InputValue = number | string;\n\nexport const input = (\n  valueSrc: SourceChangeableType<InputValue>,\n  elementSrc: SourceType<HTMLInputElement>,\n) => {\n  const setValue = () => {\n    value(elementSrc, (element) => {\n      valueSrc.give(element.value);\n    });\n  };\n\n  let prevElement: HTMLInputElement | null = null;\n\n  value(\n    elementSrc,\n    patron((element) => {\n      if (prevElement) {\n        element.removeEventListener(\"keyup\", setValue);\n        element.removeEventListener(\"change\", setValue);\n      }\n\n      element.addEventListener(\"keyup\", setValue);\n      element.addEventListener(\"change\", setValue);\n      prevElement = element;\n    }),\n  );\n\n  value(\n    sourceAll([valueSrc, elementSrc]),\n    patron(([value, element]) => {\n      element.value = String(value);\n    }),\n  );\n\n  return valueSrc;\n};\n","import { patron, sourceAll, SourceType, value } from \"silentium\";\n\ntype LogAware = { log: (...args: unknown[]) => unknown };\n\n/**\n * Helps to print logs to somewhere\n * https://developer.mozilla.org/en-US/docs/Web/API/Console_API\n */\nexport const log = <T>(\n  consoleLike: SourceType<LogAware>,\n  title: SourceType<string>,\n  source: SourceType<T>,\n): SourceType<T> => {\n  const all = sourceAll([source, title, consoleLike]);\n\n  value(\n    all,\n    patron(([s, title, console]) => {\n      console.log(\"LOG:\", title, s);\n    }),\n  );\n\n  return source;\n};\n"],"names":["historyPoppedPage","listenSrc","destroyedSrc","result","sourceOf","handler","e","state","url","give","String","value","patronOnce","listen","addEventListener","destroy","removeEventListener","historyNewPate","pushSrc","urlSrc","guest","sourceAll","guestCast","push","pushState","date","Date","now","fetched","fetch","request","errors","patron","req","then","response","readableResponse","headers","get","json","text","ok","Promise","reject","content","catch","error","element","createObserver","documentSrc","selectorSrc","selector","document","querySelector","Error","targetNode","body","config","childList","subtree","observer","mutationsList","mutation","type","disconnect","observe","attribute","elementSrc","attrNameSrc","defaultValueSrc","subSourceMany","el","attrName","defaultValue","getAttribute","styleInstalled","contentSrc","styleEl","createElement","textContent","head","appendChild","input","valueSrc","setValue","prevElement","log","consoleLike","title","source","all","s","console"],"mappings":"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"}