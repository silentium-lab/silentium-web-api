{"version":3,"file":"silentium-web-api.min.mjs","sources":["../src/fetch/FetchedData.ts","../src/fetch/RequestJson.ts","../src/dom/Elements.ts","../src/console/Log.ts"],"sourcesContent":["import { From, TheInformation, TheOwner } from \"silentium\";\n\nexport interface FetchRequestType {\n  baseUrl?: string;\n  url: string;\n  method: string;\n  credentials?: RequestCredentials;\n  headers?: Record<string, string>;\n  body?: unknown;\n  query?: Record<string, unknown>;\n}\n\n/**\n * Wrapper around FetchAPI\n * https://kosukhin.github.io/patron-web-api/#/fetch/fetched\n * https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n */\nexport class FetchedData extends TheInformation<string> {\n  public constructor(\n    private requestSrc: TheInformation<Partial<FetchRequestType>>,\n    private errorOwner?: TheOwner<unknown>,\n    private abortSrc?: TheInformation<unknown>,\n  ) {\n    super(requestSrc, abortSrc);\n  }\n\n  public value(o: TheOwner<string>): this {\n    const abortController = new AbortController();\n    if (this.abortSrc) {\n      this.abortSrc.value(\n        new From((abort) => {\n          if (abort) {\n            abortController.abort();\n          }\n        }),\n      );\n    }\n    this.requestSrc.value(\n      new From((request) => {\n        const { baseUrl, url, method, credentials, headers, body, query } =\n          request;\n        let urlWithQuery: URL;\n        try {\n          urlWithQuery = new URL(String(url), baseUrl);\n        } catch {\n          this.errorOwner?.give(new Error(\"Invalid URL\"));\n          return;\n        }\n        Object.entries(query ?? {}).forEach(([key, value]) =>\n          urlWithQuery.searchParams.append(key, String(value)),\n        );\n        const options: RequestInit = {\n          method,\n          credentials,\n          headers,\n          body: body as BodyInit,\n          signal: abortController.signal,\n        };\n        fetch(urlWithQuery.toString(), options)\n          .then((response) => response.text())\n          .then((data) => o.give(data))\n          .catch((error) => {\n            this.errorOwner?.give(error);\n          });\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"silentium\";\nimport { FetchRequestType } from \"./FetchedData\";\n\n/**\n * Represents a request for JSON data.\n */\nexport class RequestJson extends TheInformation<Partial<FetchRequestType>> {\n  public constructor(\n    private requestSrc: TheInformation<Partial<FetchRequestType>>,\n    private errorOwner?: TheOwner<unknown>,\n  ) {\n    super(requestSrc, errorOwner);\n  }\n\n  public value(o: TheOwner<Partial<FetchRequestType>>): this {\n    this.requestSrc.value(\n      new From((r) => {\n        try {\n          o.give({\n            ...r,\n            headers: {\n              ...(r.headers ?? {}),\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(r.body),\n          });\n        } catch {\n          this.errorOwner?.give(new Error(\"Failed to parse JSON\"));\n        }\n      }),\n    );\n    return this;\n  }\n}\n","import { From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Represents a collection of elements that match a given CSS selector.\n */\nexport class Elements extends TheInformation<HTMLElement[]> {\n  public constructor(private selectorSrc: TheInformation<string>) {\n    super(selectorSrc);\n  }\n\n  public value(o: TheOwner<HTMLElement[]>): this {\n    this.selectorSrc.value(\n      new From((selectorContent) => {\n        const element = document.querySelectorAll(selectorContent);\n        if (element.length) {\n          o.give(Array.from(element) as HTMLElement[]);\n        } else {\n          const targetNode = document.body;\n          const config = { childList: true, subtree: true };\n\n          const observer = new MutationObserver((mutationsList) => {\n            for (const mutation of mutationsList) {\n              if (mutation.type === \"childList\") {\n                const element = document.querySelectorAll(selectorContent);\n                if (element) {\n                  o.give(Array.from(element) as HTMLElement[]);\n                  observer.disconnect();\n                  break;\n                }\n              }\n            }\n          });\n\n          observer.observe(targetNode, config);\n        }\n      }),\n    );\n\n    return this;\n  }\n}\n","import { All, From, TheInformation, TheOwner } from \"silentium\";\n\n/**\n * Helps to print logs to somewhere\n * https://developer.mozilla.org/en-US/docs/Web/API/Console_API\n */\nexport class Log<T> extends TheInformation<T> {\n  public constructor(\n    private sourceSrc: TheInformation<T>,\n    private titleSrc: TheInformation<string>,\n  ) {\n    super(sourceSrc, titleSrc);\n  }\n\n  public value(o: TheOwner<T>): this {\n    new All(this.sourceSrc, this.titleSrc).value(\n      new From(([source, title]) => {\n        console.log(\"LOG:\", title, source);\n        o.give(source);\n      }),\n    );\n    return this;\n  }\n}\n"],"names":["FetchedData","TheInformation","constructor","requestSrc","errorOwner","abortSrc","super","this","value","o","abortController","AbortController","From","abort","request","baseUrl","url","method","credentials","headers","body","query","urlWithQuery","URL","String","give","Error","Object","entries","forEach","key","searchParams","append","options","signal","fetch","toString","then","response","text","data","catch","error","RequestJson","r","JSON","stringify","Elements","selectorSrc","selectorContent","element","document","querySelectorAll","length","Array","from","targetNode","config","childList","subtree","observer","MutationObserver","mutationsList","mutation","type","disconnect","observe","Log","sourceSrc","titleSrc","All","source","title","console","log"],"mappings":"8DAiBO,MAAMA,UAAoBC,EACxB,WAAAC,CACGC,EACAC,EACAC,GAERC,MAAMH,EAAYE,GAJVE,KAAAJ,WAAAA,EACAI,KAAAH,WAAAA,EACAG,KAAAF,SAAAA,CAAA,CAKH,KAAAG,CAAMC,GACL,MAAAC,EAAkB,IAAIC,gBAuCrB,OAtCHJ,KAAKF,UACPE,KAAKF,SAASG,MACZ,IAAII,GAAMC,IACJA,GACFH,EAAgBG,YAKxBN,KAAKJ,WAAWK,MACd,IAAII,GAAME,IACF,MAAAC,QAAEA,MAASC,EAAKC,OAAAA,EAAAC,YAAQA,UAAaC,EAASC,KAAAA,EAAAC,MAAMA,GACxDP,EACE,IAAAQ,EACA,IACFA,EAAe,IAAIC,IAAIC,OAAOR,GAAMD,EAAO,CACrC,MAEN,YADAR,KAAKH,YAAYqB,KAAK,IAAIC,MAAM,eAChC,CAEFC,OAAOC,QAAQP,GAAS,CAAA,GAAIQ,SAAQ,EAAEC,EAAKtB,KACzCc,EAAaS,aAAaC,OAAOF,EAAKN,OAAOhB,MAE/C,MAAMyB,EAAuB,CAC3BhB,SACAC,cACAC,UACAC,OACAc,OAAQxB,EAAgBwB,QAEpBC,MAAAb,EAAac,WAAYH,GAC5BI,MAAMC,GAAaA,EAASC,SAC5BF,MAAMG,GAAS/B,EAAEgB,KAAKe,KACtBC,OAAOC,IACDnC,KAAAH,YAAYqB,KAAKiB,UAIvBnC,IAAA,EC5DJ,MAAMoC,UAAoB1C,EACxB,WAAAC,CACGC,EACAC,GAERE,MAAMH,EAAYC,GAHVG,KAAAJ,WAAAA,EACAI,KAAAH,WAAAA,CAAA,CAKH,KAAAI,CAAMC,GAiBJ,OAhBPF,KAAKJ,WAAWK,MACd,IAAII,GAAMgC,IACJ,IACFnC,EAAEgB,KAAK,IACFmB,EACHzB,QAAS,IACHyB,EAAEzB,SAAW,CAAC,EAClB,eAAgB,oBAElBC,KAAMyB,KAAKC,UAAUF,EAAExB,OACxB,CACK,MACNb,KAAKH,YAAYqB,KAAK,IAAIC,MAAM,wBAAuB,MAItDnB,IAAA,EC1BJ,MAAMwC,UAAiB9C,EACrB,WAAAC,CAAoB8C,GACzB1C,MAAM0C,GADmBzC,KAAAyC,YAAAA,CAAA,CAIpB,KAAAxC,CAAMC,GA4BJ,OA3BPF,KAAKyC,YAAYxC,MACf,IAAII,GAAMqC,IACF,MAAAC,EAAUC,SAASC,iBAAiBH,GAC1C,GAAIC,EAAQG,OACV5C,EAAEgB,KAAK6B,MAAMC,KAAKL,QACb,CACL,MAAMM,EAAaL,SAAS/B,KACtBqC,EAAS,CAAEC,WAAW,EAAMC,SAAS,GAErCC,EAAW,IAAIC,kBAAkBC,IACrC,IAAA,MAAWC,KAAYD,EACjB,GAAkB,cAAlBC,EAASC,KAAsB,CAC3Bd,MAAAA,EAAUC,SAASC,iBAAiBH,GAC1C,GAAIC,EAAS,CACXzC,EAAEgB,KAAK6B,MAAMC,KAAKL,IAClBU,EAASK,aACT,KAAA,CACF,KAKGL,EAAAM,QAAQV,EAAYC,EAAM,MAKlClD,IAAA,EChCJ,MAAM4D,UAAelE,EACnB,WAAAC,CACGkE,EACAC,GAER/D,MAAM8D,EAAWC,GAHT9D,KAAA6D,UAAAA,EACA7D,KAAA8D,SAAAA,CAAA,CAKH,KAAA7D,CAAMC,GAOJ,OANP,IAAI6D,EAAI/D,KAAK6D,UAAW7D,KAAK8D,UAAU7D,MACrC,IAAII,GAAK,EAAE2D,EAAQC,MACTC,QAAAC,IAAI,OAAQF,EAAOD,GAC3B9D,EAAEgB,KAAK8C,OAGJhE,IAAA"}