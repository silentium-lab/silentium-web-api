{"version":3,"file":"silentium-web-api.min.mjs","sources":["../src/history-api/HistoryPoppedPage.ts","../src/history-api/HistoryNewPage.ts","../src/fetch/Fetched.ts","../src/dom/Element.ts","../src/dom/Elements.ts","../src/dom/Attribute.ts","../src/dom/StyleInstalled.ts","../src/dom/controls/Input.ts","../src/dom/controls/Link.ts","../src/dom/controls/Visible.ts","../src/dom/controls/Event.ts","../src/dom/Text.ts","../src/dom/Html.ts","../src/dom/ClassToggled.ts","../src/console/Log.ts"],"sourcesContent":["import {\n  destroy,\n  give,\n  patronOnce,\n  sourceOf,\n  SourceType,\n  value,\n} from \"silentium\";\n\ntype WindowListener<T> = {\n  addEventListener: (name: string, handler: (e: T) => void) => void;\n  removeEventListener: (name: string, handler: (e: T) => void) => void;\n};\n\n/**\n * Get source of new page popped from historyAPI\n * https://developer.mozilla.org/en-US/docs/Web/API/History_API\n */\nexport const historyPoppedPage = (\n  listenSrc: SourceType<WindowListener<PopStateEvent>>,\n  destroyedSrc: SourceType<void>,\n) => {\n  const result = sourceOf<string>();\n\n  const handler = (e: PopStateEvent) => {\n    const { state } = e;\n    if (state?.url) {\n      give(String(state.url), result);\n    }\n  };\n\n  value(\n    listenSrc,\n    patronOnce((listen) => {\n      listen.addEventListener(\"popstate\", handler);\n    }),\n  );\n\n  value(\n    destroyedSrc,\n    patronOnce(() => {\n      destroy([result]);\n\n      value(listenSrc, (listen) => {\n        listen.removeEventListener(\"popstate\", handler);\n      });\n    }),\n  );\n\n  return result;\n};\n","import { patron, sourceAll, SourceType, value } from \"silentium\";\n\ntype PushStateAwareType = {\n  pushState(data: Record<string, unknown>, title: string, url: string): void;\n};\n\n/**\n * Apply content of new url to history API\n * https://developer.mozilla.org/en-US/docs/Web/API/History_API\n */\nexport const historyNewPate = (\n  pushSrc: SourceType<PushStateAwareType>,\n  urlSrc: SourceType<string>,\n) => {\n  value(\n    sourceAll([urlSrc, pushSrc]),\n    patron(([url, push]) => {\n      push.pushState(\n        {\n          url,\n          date: Date.now(),\n        },\n        \"\",\n        url,\n      );\n    }),\n  );\n\n  return urlSrc;\n};\n","import {\n  give,\n  GuestType,\n  patron,\n  sourceAll,\n  sourceOf,\n  SourceType,\n  value,\n} from \"silentium\";\n\ntype FetchType = {\n  fetch: (input: RequestInfo, options: RequestInfo) => Promise<Response>;\n};\ntype FetchParams = { url: string } & RequestInit;\n\n/**\n * Wrapper around FetchAPI\n * https://kosukhin.github.io/patron-web-api/#/fetch/fetched\n * https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n */\nexport const fetched = <T>(\n  fetchSrc: SourceType<FetchType>,\n  requestSrc: SourceType<Partial<FetchParams>>,\n  errorsGuest: GuestType<Error>,\n) => {\n  const result = sourceOf<T>();\n\n  value(\n    sourceAll([requestSrc, fetchSrc]),\n    patron(([request, fetch]) => {\n      fetch\n        .fetch(\n          request.url as string,\n          { ...request, url: undefined } as unknown as RequestInfo,\n        )\n        .then((response) => {\n          let readableResponse;\n          if (response.headers.get(\"Content-Type\") === \"application/json\") {\n            readableResponse = response.json();\n          } else {\n            readableResponse = response.text();\n          }\n\n          if (!response.ok) {\n            return Promise.reject(readableResponse);\n          }\n\n          return readableResponse;\n        })\n        .then((content) => {\n          give(content, result);\n        })\n        .catch((error) => {\n          give(error, errorsGuest);\n        });\n    }),\n  );\n\n  return result;\n};\n","import {\n  give,\n  guestCast,\n  GuestType,\n  PersonalType,\n  sourceAll,\n  SourceType,\n  value,\n} from \"silentium\";\n\ntype MutationAware = {\n  observe(\n    node: HTMLElement,\n    config: { childList: boolean; subtree: boolean },\n  ): void;\n  disconnect(): void;\n};\n\ntype MutationList = { type: string }[];\n\n/**\n * Helps to find element by selector\n * https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API\n */\nexport const element = <T extends HTMLElement>(\n  createObserver: PersonalType<MutationAware>,\n  documentSrc: SourceType<Document>,\n  selectorSrc: SourceType<string>,\n): SourceType<T> => {\n  return (guest: GuestType<T>) => {\n    value(\n      sourceAll([selectorSrc, documentSrc]),\n      guestCast(guest, ([selector, document]) => {\n        const element = document.querySelector(selector);\n        if (element) {\n          give(element as T, guest);\n        } else if (createObserver) {\n          const targetNode = document.body;\n          const config = { childList: true, subtree: true };\n\n          const observer = createObserver.get((mutationsList: MutationList) => {\n            for (const mutation of mutationsList) {\n              if (mutation.type === \"childList\") {\n                const element = document.querySelector(selector);\n                if (element) {\n                  give(element as T, guest);\n                  observer.disconnect();\n                  break;\n                }\n              }\n            }\n          });\n\n          observer.observe(targetNode, config);\n        } else {\n          throw new Error(`Element with selector=${selector} was not found!`);\n        }\n      }),\n    );\n  };\n};\n","import {\n  give,\n  guestCast,\n  GuestType,\n  PersonalType,\n  sourceAll,\n  SourceType,\n  value,\n} from \"silentium\";\n\ntype MutationAware = {\n  observe(\n    node: HTMLElement,\n    config: { childList: boolean; subtree: boolean },\n  ): void;\n  disconnect(): void;\n};\n\ntype MutationList = { type: string }[];\n\n/**\n * Helps to find element by selector\n * https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API\n */\nexport const elements = <T extends HTMLElement[]>(\n  createObserver: PersonalType<MutationAware>,\n  documentSrc: SourceType<Document>,\n  selectorSrc: SourceType<string>,\n): SourceType<T> => {\n  return (guest: GuestType<T>) => {\n    value(\n      sourceAll([selectorSrc, documentSrc]),\n      guestCast(guest, ([selector, document]) => {\n        const element = document.querySelectorAll(selector);\n        if (element) {\n          give(Array.from(element) as T, guest);\n        } else if (createObserver) {\n          const targetNode = document.body;\n          const config = { childList: true, subtree: true };\n\n          const observer = createObserver.get((mutationsList: MutationList) => {\n            for (const mutation of mutationsList) {\n              if (mutation.type === \"childList\") {\n                const element = document.querySelectorAll(selector);\n                if (element) {\n                  give(Array.from(element) as T, guest);\n                  observer.disconnect();\n                  break;\n                }\n              }\n            }\n          });\n\n          observer.observe(targetNode, config);\n        } else {\n          throw new Error(`Element with selector=${selector} was not found!`);\n        }\n      }),\n    );\n  };\n};\n","import {\n  give,\n  patron,\n  sourceAll,\n  sourceOf,\n  SourceType,\n  subSourceMany,\n  value,\n} from \"silentium\";\n\n/**\n * Return content attribute of HTMLElement\n * https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API\n */\nexport const attribute = (\n  attrNameSrc: SourceType<string>,\n  elementSrc: SourceType<HTMLElement>,\n  defaultValueSrc: SourceType<string> = \"\",\n) => {\n  const result = sourceOf<string>();\n  subSourceMany(result, [elementSrc, attrNameSrc, defaultValueSrc]);\n\n  value(\n    sourceAll([elementSrc, attrNameSrc, defaultValueSrc]),\n    patron(([el, attrName, defaultValue]) => {\n      give(el.getAttribute(attrName) || defaultValue, result);\n    }),\n  );\n\n  return result;\n};\n","import {\n  give,\n  guestCast,\n  GuestType,\n  sourceAll,\n  SourceType,\n  value,\n} from \"silentium\";\n\n/**\n * Render styles to document\n * https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API\n */\nexport const styleInstalled = (\n  documentSrc: SourceType<Document>,\n  contentSrc: SourceType<string>,\n) => {\n  return (guest: GuestType<string>) => {\n    value(\n      sourceAll([documentSrc, contentSrc]),\n      guestCast(guest, ([document, content]) => {\n        const styleEl = document.createElement(\"style\");\n        styleEl.textContent = content;\n        document.head.appendChild(styleEl);\n        give(content, guest);\n      }),\n    );\n  };\n};\n","import {\n  patron,\n  sourceAll,\n  SourceChangeableType,\n  SourceType,\n  value,\n} from \"silentium\";\n\ntype InputValue = number | string;\n\nexport const input = (\n  valueSrc: SourceChangeableType<InputValue>,\n  elementSrc: SourceType<HTMLInputElement>,\n) => {\n  const setValue = () => {\n    value(elementSrc, (element) => {\n      valueSrc.give(element.value);\n    });\n  };\n\n  let prevElement: HTMLInputElement | null = null;\n\n  value(\n    elementSrc,\n    patron((element) => {\n      if (prevElement) {\n        element.removeEventListener(\"keyup\", setValue);\n        element.removeEventListener(\"change\", setValue);\n      }\n\n      element.addEventListener(\"keyup\", setValue);\n      element.addEventListener(\"change\", setValue);\n      prevElement = element;\n    }),\n  );\n\n  value(\n    sourceAll([valueSrc, elementSrc]),\n    patron(([value, element]) => {\n      element.value = String(value);\n    }),\n  );\n\n  return valueSrc;\n};\n","import { source, sourceAll, sourceOf, SourceType, value } from \"silentium\";\n\n/**\n * Represents link what when it will be clicked, then source will be\n * filled with clicked href value\n */\nexport const link = (\n  wrapperSrc: SourceType<HTMLElement>,\n  elementSelectorSrc: SourceType<string>,\n  attributeSrc = source<string>(\"href\"),\n): SourceType<string> => {\n  const result = sourceOf<string>();\n\n  value(\n    sourceAll([wrapperSrc, elementSelectorSrc, attributeSrc]),\n    ([wrapper, elementSelector, attribute]) => {\n      wrapper.addEventListener(\"click\", (e) => {\n        if (\n          e.target !== null &&\n          \"matches\" in e.target &&\n          typeof e.target.matches == \"function\" &&\n          e.target.matches(elementSelector)\n        ) {\n          e.preventDefault();\n          const href = (e?.target as HTMLElement)?.getAttribute(attribute);\n          if (href) {\n            result.give(href);\n          }\n        }\n      });\n    },\n  );\n\n  return result;\n};\n","import { patron, sourceAll, SourceType, value } from \"silentium\";\n\nexport const visible = (\n  valueSrc: SourceType<boolean>,\n  elementSrc: SourceType<HTMLElement>,\n  visibilityTypeSrc: SourceType<string> = \"block\",\n) => {\n  value(\n    sourceAll([valueSrc, elementSrc, visibilityTypeSrc]),\n    patron(([v, el, vt]) => {\n      el.style.display = v ? vt : \"none\";\n    }),\n  );\n\n  return valueSrc;\n};\n","import {\n  give,\n  patronOnce,\n  sourceDestroyable,\n  sourceOnce,\n  sourceSync,\n  SourceType,\n  value,\n} from \"silentium\";\n\n/**\n * Creates a source that emits events from a DOM element.\n */\nexport const event = <T>(\n  elementSrc: SourceType<HTMLElement>,\n  eventNameSrc: SourceType<string>,\n): SourceType<T> => {\n  const elementOnceSrc = sourceOnce(elementSrc);\n  const eventNameSync = sourceSync(eventNameSrc);\n  return sourceDestroyable((g) => {\n    let el: HTMLElement | null = null;\n    const eventHandler = (e: Event) => {\n      give(e as T, g);\n    };\n    value(\n      elementOnceSrc,\n      patronOnce((element) => {\n        el = element;\n        element.addEventListener(eventNameSync.syncValue(), eventHandler);\n      }),\n    );\n    return () => {\n      if (el !== null) {\n        el.removeEventListener(eventNameSync.syncValue(), eventHandler);\n      }\n    };\n  });\n};\n","import { patron, sourceAll, SourceType, value } from \"silentium\";\n\nexport const text = (\n  valueSrc: SourceType<string>,\n  elementSrc: SourceType<HTMLElement>,\n) => {\n  value(\n    sourceAll([valueSrc, elementSrc]),\n    patron(([v, el]) => {\n      el.textContent = v;\n    }),\n  );\n\n  return valueSrc;\n};\n","import { patron, sourceAll, SourceType, value } from \"silentium\";\n\nexport const html = (\n  elementSrc: SourceType<HTMLElement>,\n  valueSrc: SourceType<string>,\n) => {\n  value(\n    sourceAll([valueSrc, elementSrc]),\n    patron(([v, el]) => {\n      el.innerHTML = v;\n    }),\n  );\n\n  return valueSrc;\n};\n","import { SourceType, sourceCombined, GuestType, give } from \"silentium\";\n\n/**\n * Gives ability to toggle classes of html element\n */\nexport const classToggled = (\n  elementSrc: SourceType<HTMLElement>,\n  classSrc: SourceType<string>,\n) => {\n  return sourceCombined(\n    elementSrc,\n    classSrc,\n  )((g: GuestType<string>, element, theClass) => {\n    element.classList.toggle(theClass);\n    give(theClass, g);\n  });\n};\n\nexport const classAdded = (\n  elementSrc: SourceType<HTMLElement>,\n  classSrc: SourceType<string>,\n) => {\n  return sourceCombined(\n    elementSrc,\n    classSrc,\n  )((g: GuestType<string>, element, theClass) => {\n    element.classList.add(theClass);\n    give(theClass, g);\n  });\n};\n\nexport const classRemoved = (\n  elementSrc: SourceType<HTMLElement>,\n  classSrc: SourceType<string>,\n) => {\n  return sourceCombined(\n    elementSrc,\n    classSrc,\n  )((g: GuestType<string>, element, theClass) => {\n    element.classList.remove(theClass);\n    give(theClass, g);\n  });\n};\n","import { patron, sourceAll, SourceType, value } from \"silentium\";\n\ntype LogAware = { log: (...args: unknown[]) => unknown };\n\n/**\n * Helps to print logs to somewhere\n * https://developer.mozilla.org/en-US/docs/Web/API/Console_API\n */\nexport const log = <T>(\n  consoleLike: SourceType<LogAware>,\n  title: SourceType<string>,\n  source: SourceType<T>,\n): SourceType<T> => {\n  const all = sourceAll([source, title, consoleLike]);\n\n  value(\n    all,\n    patron(([s, title, console]) => {\n      console.log(\"LOG:\", title, s);\n    }),\n  );\n\n  return source;\n};\n"],"names":["historyPoppedPage","listenSrc","destroyedSrc","result","sourceOf","handler","e","state","url","give","String","value","patronOnce","listen","addEventListener","destroy","removeEventListener","historyNewPate","pushSrc","urlSrc","sourceAll","patron","push","pushState","date","Date","now","fetched","fetchSrc","requestSrc","errorsGuest","request","fetch","then","response","readableResponse","headers","get","json","text","ok","Promise","reject","content","catch","error","element","createObserver","documentSrc","selectorSrc","guest","guestCast","selector","document","querySelector","Error","targetNode","body","config","childList","subtree","observer","mutationsList","mutation","type","disconnect","observe","elements","querySelectorAll","Array","from","attribute","attrNameSrc","elementSrc","defaultValueSrc","subSourceMany","el","attrName","defaultValue","getAttribute","styleInstalled","contentSrc","styleEl","createElement","textContent","head","appendChild","input","valueSrc","setValue","prevElement","link","wrapperSrc","elementSelectorSrc","attributeSrc","source","wrapper","elementSelector","target","matches","preventDefault","href","visible","visibilityTypeSrc","v","vt","style","display","event","eventNameSrc","elementOnceSrc","sourceOnce","eventNameSync","sourceSync","sourceDestroyable","g","eventHandler","syncValue","html","innerHTML","classToggled","classSrc","sourceCombined","theClass","classList","toggle","classAdded","add","classRemoved","remove","log","consoleLike","title","all","s","console"],"mappings":"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"}