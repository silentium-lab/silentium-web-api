import{all as e}from"silentium";const t=(e,t,r)=>o=>{const n=new AbortController;r&&r((e=>{e&&n.abort()})),e((e=>{const{baseUrl:r,url:s,method:c,credentials:i,headers:a,body:l,query:d}=e;let h;try{h=new URL(String(s),r)}catch{return void t?.(new Error("Invalid URL"))}Object.entries(d??{}).forEach((([e,t])=>h.searchParams.append(e,String(t))));const y={method:c,credentials:i,headers:a,body:l,signal:n.signal};fetch(h.toString(),y).then((e=>e.text())).then((e=>o(e))).catch((e=>{t?.(e)}))}))},r=(e,t)=>r=>{e((e=>{try{r({...e,headers:{...e.headers??{},"Content-Type":"application/json"},body:JSON.stringify(e.body)})}catch{t?.(new Error("Failed to parse JSON"))}}))},o=e=>t=>{e((e=>{const r=document.querySelectorAll(e);if(r.length)t(Array.from(r));else{const r=document.body,o={childList:!0,subtree:!0},n=new MutationObserver((r=>{for(const o of r)if("childList"===o.type){const r=document.querySelectorAll(e);if(r){t(Array.from(r)),n.disconnect();break}}}));n.observe(r,o)}}))},n=(t,r)=>o=>{e(t,r)((([e,t])=>{console.log("LOG:",t,e),o(e)}))},s=e=>t=>{setTimeout((()=>{t(e)}),e)};export{o as elements,t as fetchedData,n as log,r as requestJson,s as timer};
//# sourceMappingURL=silentium-web-api.min.mjs.map
