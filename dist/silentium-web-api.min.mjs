import{sourceOf as t,value as e,patronOnce as n,destroy as o,give as r,sourceAll as s,guestCast as c,patron as i,subSourceMany as l}from"silentium";const a=(s,c)=>{const i=t(),l=t=>{const{state:e}=t;e?.url&&r(String(e.url),i)};return e(c,n((t=>{t.addEventListener("popstate",l)}))),e(s,n((()=>{o([i]),e(c,(t=>{t.removeEventListener("popstate",l)}))}))),i},u=(t,n)=>o=>{e(s([t,n]),c(o,(([t,e])=>{e.pushState({url:t,date:Date.now()},"",t),r(t,o)})))},p=(n,o,c)=>{const l=t();return e(s([n,c]),i((([t,e])=>{e.fetch(t).then((t=>{let e;return e="application/json"===t.headers.get("Content-Type")?t.json():t.text(),t.ok?e:Promise.reject(e)})).then((t=>{r(t,l)})).catch((t=>{r(t,o)}))}))),l},d=(t,n,o)=>i=>{e(s([t,n]),c(i,(([t,e])=>{const n=e.querySelector(t);if(n)r(n,i);else{if(!o)throw new Error(`Element with selector=${t} was not found!`);{const n=e.body,s={childList:!0,subtree:!0},c=o.get((n=>{for(const o of n)if("childList"===o.type){const n=e.querySelector(t);if(n){r(n,i),c.disconnect();break}}}));c.observe(n,s)}}})))},h=(n,o,c="")=>{const a=t();return l(a,[n,o,c]),e(s([n,o,c]),i((([t,e,n])=>{r(t.getAttribute(e)||n,a)}))),a},f=(t,n)=>o=>{e(s([t,n]),c(o,(([t,e])=>{const n=t.createElement("style");n.textContent=e,t.head.appendChild(n),r(t,o)})))},m=(t,n="",o=console)=>{const r=s([t,n,o]);return e(r,i((([t,e,n])=>{n.log("LOG:",e,t)}))),t};export{h as attribute,d as element,p as fetched,u as historyNewPate,a as historyPoppedPage,m as log,f as styleInstalled};
//# sourceMappingURL=silentium-web-api.min.mjs.map
